#include "SphericalHarmonics.h"
#include "Vector.h"
#include "Color.h"
#include "CommonDef.h"
#include "Transform.h"

#include <cassert>

using namespace std;

namespace ToyMan {

#define ALLOCA(TYPE, COUNT) (TYPE *)alloca((COUNT) * sizeof(TYPE))

static inline void legendrep(float x, int lmax, float *out) {
#define P(l,m) out[SHIndex(l,m)]
    // Compute $m=0$ Legendre values using recurrence
    P(0,0) = 1.f;
    P(1,0) = x;
    for (int l = 2; l <= lmax; ++l)
    {
        P(l, 0) = ((2*l-1)*x*P(l-1,0) - (l-1)*P(l-2,0)) / l;
        assert(!isnan(P(l, 0)));
        assert(!isinf(P(l, 0)));
    }

    // Compute $m=l$ edge using Legendre recurrence
    float neg = -1.f;
    float dfact = 1.f;
    float xroot = sqrtf(max(0.f, 1.f - x*x));
    float xpow = xroot;
    for (int l = 1; l <= lmax; ++l) {
        P(l, l) = neg * dfact * xpow;
        assert(!isnan(P(l, l)));
        assert(!isinf(P(l, l)));
        neg *= -1.f;      // neg = (-1)^l
        dfact *= 2*l + 1; // dfact = (2*l-1)!!
        xpow *= xroot;    // xpow = powf(1.f - x*x, float(l) * 0.5f);
    }

    // Compute $m=l-1$ edge using Legendre recurrence
    for (int l = 2; l <= lmax; ++l)
    {
        P(l, l-1) = x * (2*l-1) * P(l-1, l-1);
        assert(!isnan(P(l, l-1)));
        assert(!isinf(P(l, l-1)));
    }

    // Compute $m=1, \ldots, l-2$ values using Legendre recurrence
    for (int l = 3; l <= lmax; ++l)
        for (int m = 1; m <= l-2; ++m)
        {
            P(l, m) = ((2 * (l-1) + 1) * x * P(l-1,m) -
                       (l-1+m) * P(l-2,m)) / (l - m);
            assert(!isnan(P(l, m)));
            assert(!isinf(P(l, m)));
        }
    #if 0
        // wrap up with the negative m ones now
        // P(l,-m)(x) = -1^m (l-m)!/(l+m)! P(l,m)(x)
        for (int l = 1; l <= lmax; ++l) {
            float fa = 1.f, fb = fact(2*l);
            // fa = fact(l+m), fb = fact(l-m)
            for (int m = -l; m < 0; ++m) {
                float neg = ((-m) & 0x1) ? -1.f : 1.f;
                P(l,m) = neg * fa/fb * P(l,-m);
                fb /= l-m;
                fa *= (l+m+1) > 1 ? (l+m+1) : 1.;
            }
        }
    #endif
#undef P
}


static inline float fact(float v);
static inline float divfact(int a, int b);
static inline float K(int l, int m) {
    return sqrtf((2.f * l + 1.f) * INV_FOURPI * divfact(l, m));
}


static inline float divfact(int a, int b) {
    if (b == 0) return 1.f;
    float fa = (float)a, fb = fabsf((float)b);
    float v = 1.f;
    for (float x = fa-fb+1.f; x <= fa+fb; x += 1.f)
        v *= x;
    return 1.f / v;
}


// n!! = 1 if n==0 or 1, otherwise n * (n-2)!!
static float dfact(float v) {
    if (v <= 1.f) return 1.f;
    return v * dfact(v - 2.f);
}


static inline float fact(float v) {
    if (v <= 1.f) return 1.f;
    return v * fact(v - 1.f);
}


inline static void sinCosIndexed(float s, float c, int n,
                          float *sout, float *cout) {
    float si = 0, ci = 1;
    for (int i = 0; i < n; ++i) {
        // Compute $\sin{}i\phi$ and $\cos{}i\phi$ using recurrence
        *sout++ = si;
        *cout++ = ci;
        float oldsi = si;
        si = si * c + ci * s;
        ci = ci * c - oldsi * s;
    }
}


static void toZYZ(const Matrix4x4 &m, float *alpha, float *beta, float *gamma) {
#define M(a, b) (m.m[a][b])

    float sy = sqrtf(M(2,1)*M(2,1) + M(2,0)*M(2,0));
    if (sy > 16*FLT_EPSILON) {
        *gamma = -atan2f(M(1,2), -M(0,2));
        *beta  = -atan2f(sy, M(2,2));
        *alpha = -atan2f(M(2,1), M(2,0));
    } else {
        *gamma =  0;
        *beta  = -atan2f(sy, M(2,2));
        *alpha = -atan2f(-M(1,0), M(1,1));
    }
#undef M
}


static inline float lambda(float l) {
    return sqrtf((4.f * (float)M_PI) / (2.f * l + 1.f));
}

static const float Klm[] = {
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.282095f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.345494f,0.488602f,0.345494f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.128758f,0.257516f,0.630783f,0.257516f,0.128758f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.0278149f,0.0681324f,0.215453f,0.746353f,0.215453f,0.0681324f,0.0278149f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.0042146f,0.0119207f,0.0446031f,0.189235f,0.846284f,0.189235f,0.0446031f,0.0119207f,0.0042146f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.000491145f,0.00155314f,0.0065894f,0.0322814f,0.170817f,0.935603f,0.170817f,0.0322814f,0.0065894f,0.00155314f,0.000491145f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,4.64727e-005f,0.000160986f,0.000755093f,0.00413581f,0.0248149f,0.156943f,1.01711f,0.156943f,0.0248149f,0.00413581f,0.000755093f,0.000160986f,4.64727e-005f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,3.7003e-006f,1.38452e-005f,7.05972e-005f,0.000423583f,0.00280973f,0.0198678f,0.145998f,1.09255f,0.145998f,0.0198678f,0.00280973f,0.000423583f,7.05972e-005f,1.38452e-005f,3.7003e-006f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,2.54279e-007f,1.01711e-006f,5.57096e-006f,3.6104e-005f,0.000260349f,0.00201666f,0.0163834f,0.137073f,1.16311f,0.137073f,0.0163834f,0.00201666f,0.000260349f,3.6104e-005f,5.57096e-006f,1.01711e-006f,2.54279e-007f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,1.53674e-008f,6.51985e-008f,3.80169e-007f,2.63389e-006f,2.0402e-005f,0.000170696f,0.00150754f,0.0138169f,0.129614f,1.22962f,0.129614f,0.0138169f,0.00150754f,0.000170696f,2.0402e-005f,2.63389e-006f,3.80169e-007f,6.51985e-008f,1.53674e-008f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,8.28786e-010f,3.70644e-009f,2.28481e-008f,1.67898e-007f,1.38452e-006f,1.23836e-005f,0.000117481f,0.001163f,0.0118603f,0.123256f,1.29272f,0.123256f,0.0118603f,0.001163f,0.000117481f,1.23836e-005f,1.38452e-006f,1.67898e-007f,2.28481e-008f,3.70644e-009f,8.28786e-010f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,4.0353e-011f,1.89272e-010f,1.22662e-009f,9.50139e-009f,8.28312e-008f,7.85806e-007f,7.93625e-006f,8.39894e-005f,0.000920058f,0.0103276f,0.117753f,1.35288f,0.117753f,0.0103276f,0.000920058f,8.39894e-005f,7.93625e-006f,7.85806e-007f,8.28312e-008f,9.50139e-009f,1.22662e-009f,1.89272e-010f,4.0353e-011f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,1.79066e-012f,8.77239e-012f,5.94972e-011f,4.83358e-010f,4.43005e-009f,4.43005e-008f,4.73e-007f,5.30941e-006f,6.19178e-005f,0.000743014f,0.00910002f,0.112928f,1.41047f,0.112928f,0.00910002f,0.000743014f,6.19178e-005f,5.30941e-006f,4.73e-007f,4.43005e-008f,4.43005e-009f,4.83358e-010f,5.94972e-011f,8.77239e-012f,1.79066e-012f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,7.29907e-014f,3.72181e-013f,2.63172e-012f,2.23309e-011f,2.1419e-010f,2.24644e-009f,2.52163e-008f,2.98363e-007f,3.67847e-006f,4.68192e-005f,0.000610448f,0.00809851f,0.108653f,1.46581f,0.108653f,0.00809851f,0.000610448f,4.68192e-005f,3.67847e-006f,2.98363e-007f,2.52163e-008f,2.24644e-009f,2.1419e-010f,2.23309e-011f,2.63172e-012f,3.72181e-013f,7.29907e-014f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,2.75121e-015f,1.4558e-014f,1.06979e-013f,9.44815e-013f,9.44815e-012f,1.03499e-010f,1.21584e-009f,1.50882e-008f,1.95565e-007f,2.62379e-006f,3.61664e-005f,0.000508906f,0.00726863f,0.10483f,1.51913f,0.10483f,0.00726863f,0.000508906f,3.61664e-005f,2.62379e-006f,1.95565e-007f,1.50882e-008f,1.21584e-009f,1.03499e-010f,9.44815e-012f,9.44815e-013f,1.06979e-013f,1.4558e-014f,2.75121e-015f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,9.64375e-017f,5.2821e-016f,4.02273e-015f,3.68689e-014f,3.83153e-013f,4.36861e-012f,5.35044e-011f,6.93496e-010f,9.40704e-009f,1.32369e-007f,1.91821e-006f,2.84516e-005f,0.000429609f,0.00657176f,0.101384f,1.57064f,0.101384f,0.00657176f,0.000429609f,2.84516e-005f,1.91821e-006f,1.32369e-007f,9.40704e-009f,6.93496e-010f,5.35044e-011f,4.36861e-012f,3.83153e-013f,3.68689e-014f,4.02273e-015f,5.2821e-016f,9.64375e-017f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,3.15912e-018f,1.78707e-017f,1.40714e-016f,1.33493e-015f,1.43776e-014f,1.70118e-013f,2.16525e-012f,2.92109e-011f,4.13104e-010f,6.07136e-009f,9.20768e-008f,1.43238e-006f,2.27383e-005f,0.000366644f,0.00597979f,0.0982579f,1.62051f,0.0982579f,0.00597979f,0.000366644f,2.27383e-005f,1.43238e-006f,9.20768e-008f,6.07136e-009f,4.13104e-010f,2.92109e-011f,2.16525e-012f,1.70118e-013f,1.43776e-014f,1.33493e-015f,1.40714e-016f,1.78707e-017f,3.15912e-018f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,9.71285e-020f,5.66352e-019f,4.60106e-018f,4.5081e-017f,5.02001e-016f,6.14823e-015f,8.11008e-014f,1.13541e-012f,1.66871e-011f,2.55263e-010f,4.03606e-009f,6.55782e-008f,1.08947e-006f,1.84246e-005f,0.000315916f,0.00547182f,0.0954044f,1.6689f,0.0954044f,0.00547182f,0.000315916f,1.84246e-005f,1.08947e-006f,6.55782e-008f,4.03606e-009f,2.55263e-010f,1.66871e-011f,1.13541e-012f,8.11008e-014f,6.14823e-015f,5.02001e-016f,4.5081e-017f,4.60106e-018f,5.66352e-019f,9.71285e-020f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,1.41231e-019f,1.42636e-018f,1.63876e-017f,2.07289e-016f,2.82704e-015f,4.09677e-014f,6.24002e-013f,9.90572e-012f,1.62768e-010f,2.75265e-009f,4.76773e-008f,8.42149e-007f,1.51118e-005f,0.00027452f,0.00503203f,0.0927861f,1.71592f,0.0927861f,0.00503203f,0.00027452f,1.51118e-005f,8.42149e-007f,4.76773e-008f,2.75265e-009f,1.62768e-010f,9.90572e-012f,6.24002e-013f,4.09677e-014f,2.82704e-015f,2.07289e-016f,1.63876e-017f,1.42636e-018f,1.41231e-019f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,5.02286e-019f,6.549e-018f,9.21526e-017f,1.37921e-015f,2.17199e-014f,3.56894e-013f,6.07769e-012f,1.06663e-010f,1.91993e-009f,3.52976e-008f,6.60357e-007f,1.25294e-005f,0.000240355f,0.00464825f,0.0903723f,1.76168f,0.0903723f,0.00464825f,0.000240355f,1.25294e-005f,6.60357e-007f,3.52976e-008f,1.91993e-009f,1.06663e-010f,6.07769e-012f,3.56894e-013f,2.17199e-014f,1.37921e-015f,9.21526e-017f,6.549e-018f,5.02286e-019f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,0.f,1.94653e-019f,2.82079e-018f,4.3517e-017f,7.07068e-016f,1.19993e-014f,2.1127e-013f,3.83792e-012f,7.15954e-011f,1.36595e-009f,2.65572e-008f,5.24462e-007f,1.04892e-005f,0.000211872f,0.00431096f,0.0881378f,1.80629f,0.0881378f,0.00431096f,0.000211872f,1.04892e-005f,5.24462e-007f,2.65572e-008f,1.36595e-009f,7.15954e-011f,3.83792e-012f,2.1127e-013f,1.19993e-014f,7.07068e-016f,4.3517e-017f,2.82079e-018f,1.94653e-019f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,1.2919e-018f,2.16176e-017f,3.78153e-016f,6.8695e-015f,1.28883e-013f,2.48581e-012f,4.90908e-011f,9.89152e-010f,2.02716e-008f,4.21337e-007f,8.8581e-006f,0.000187909f,0.00401263f,0.0860614f,1.84982f,0.0860614f,0.00401263f,0.000187909f,8.8581e-006f,4.21337e-007f,2.02716e-008f,9.89152e-010f,4.90908e-011f,2.48581e-012f,1.28883e-013f,6.8695e-015f,3.78153e-016f,2.16176e-017f,1.2919e-018f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,6.23009e-019f,1.12142e-017f,2.09798e-016f,4.05729e-015f,8.07391e-014f,1.64676e-012f,3.43064e-011f,7.27749e-010f,1.56762e-008f,3.42014e-007f,7.53984e-006f,0.000167581f,0.00374723f,0.0841252f,1.89235f,0.0841252f,0.00374723f,0.000167581f,7.53984e-006f,3.42014e-007f,1.56762e-008f,7.27749e-010f,3.43064e-011f,1.64676e-012f,8.07391e-014f,4.05729e-015f,2.09798e-016f,1.12142e-017f,6.23009e-019f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,3.1402e-019f,6.04029e-018f,1.202e-016f,2.46337e-015f,5.17894e-014f,1.11317e-012f,2.43884e-011f,5.43155e-010f,1.22662e-008f,2.80249e-007f,6.46398e-006f,0.000150209f,0.00350989f,0.0823141f,1.93394f,0.0823141f,0.00350989f,0.000150209f,6.46398e-006f,2.80249e-007f,1.22662e-008f,5.43155e-010f,2.43884e-011f,1.11317e-012f,5.17894e-014f,2.46337e-015f,1.202e-016f,6.04029e-018f,3.1402e-019f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,1.6448e-019f,3.36281e-018f,7.08588e-017f,1.53291e-015f,3.39324e-014f,7.66302e-013f,1.76083e-011f,4.10692e-010f,9.70138e-009f,2.31617e-007f,5.57808e-006f,0.000135261f,0.0032966f,0.0806153f,1.97466f,0.0806153f,0.0032966f,0.000135261f,5.57808e-006f,2.31617e-007f,9.70138e-009f,4.10692e-010f,1.76083e-011f,7.66302e-013f,3.39324e-014f,1.53291e-015f,7.08588e-017f,3.36281e-018f,1.6448e-019f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,-0.00132704f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,1.92792e-018f,4.28501e-017f,9.75252e-016f,2.26628e-014f,5.363e-013f,1.28935e-011f,3.14242e-010f,7.74848e-009f,1.92936e-007f,4.84265e-006f,0.000122319f,0.0031041f,0.0790175f,2.01456f,0.0790175f,0.0031041f,0.000122319f,4.84265e-006f,1.92936e-007f,7.74848e-009f,3.14242e-010f,1.28935e-011f,5.363e-013f,2.26628e-014f,9.75252e-016f,4.28501e-017f,1.92792e-018f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
-0.00132704f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,1.1347e-018f,2.65141e-017f,6.33016e-016f,1.54019e-014f,3.81023e-013f,9.56359e-012f,2.43073e-010f,6.24467e-009f,1.6188e-007f,4.22753e-006f,0.000111048f,0.00292965f,0.0775112f,2.05368f,0.0775112f,0.00292965f,0.000111048f,4.22753e-006f,1.6188e-007f,6.24467e-009f,2.43073e-010f,9.56359e-012f,3.81023e-013f,1.54019e-014f,6.33016e-016f,2.65141e-017f,1.1347e-018f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,-0.00132704f,-0.00132704f,
0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,6.83846e-019f,1.67507e-017f,4.18433e-016f,1.06351e-014f,2.7446e-013f,7.17807e-012f,1.89914e-010f,5.07464e-009f,1.36733e-007f,3.70948e-006f,0.000101181f,0.00277096f,0.0760879f,2.09207f,0.0760879f,0.00277096f,0.000101181f,3.70948e-006f,1.36733e-007f,5.07464e-009f,1.89914e-010f,7.17807e-012f,2.7446e-013f,1.06351e-014f,4.18433e-016f,1.67507e-017f,6.83846e-019f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f,-0.00132704f,0.f,
0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,4.21083e-019f,1.0785e-017f,2.81238e-016f,7.45148e-015f,2.00222e-013f,5.44662e-012f,1.49757e-010f,4.1556e-009f,1.16208e-007f,3.27039e-006f,9.25006e-005f,0.0026261f,0.0747402f,2.12977f,0.0747402f,0.0026261f,9.25006e-005f,3.27039e-006f,1.16208e-007f,4.1556e-009f,1.49757e-010f,5.44662e-012f,2.00222e-013f,7.45148e-015f,2.81238e-016f,1.0785e-017f,4.21083e-019f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,0.f,-0.00132704f};

inline int KlmIndex(int l, int m) {
    return l*58+(m+28);
}

// Spherical Harmonics Definitions
void SHEvaluate(const Vector &w, int lmax, float *out) {
    assert(lmax <= 28);    
    // Compute Legendre polynomial values for $\cos\theta$
    assert(w.Length() > .995f && w.Length() < 1.005f);
    legendrep(w.z, lmax, out);

    // Compute $K_l^m$ coefficients
    //float *Klm = ALLOCA(float, SHTerms(lmax));
    //for (int l = 0; l <= lmax; ++l)
    //    for (int m = -l; m <= l; ++m)
    //        Klm[SHIndex(l, m)] = K(l, m);

    // Compute $\sin\phi$ and $\cos\phi$ values
    float *sins = ALLOCA(float, lmax+1), *coss = ALLOCA(float, lmax+1);
    float xyLen = sqrtf(max(0.f, 1.f - w.z*w.z));
    if (xyLen == 0.f) {
        for (int i = 0; i <= lmax; ++i) sins[i] = 0.f;
        for (int i = 0; i <= lmax; ++i) coss[i] = 1.f;
    }
    else
        sinCosIndexed(w.y / xyLen, w.x / xyLen, lmax+1, sins, coss);

    // Apply SH definitions to compute final $(l,m)$ values
    static const float sqrt2 = sqrtf(2.f);
    for (int l = 0; l <= lmax; ++l) {
        for (int m = -l; m < 0; ++m)
        {
            out[SHIndex(l, m)] = sqrt2 * (float)Klm[KlmIndex(l,m)] *
                out[SHIndex(l, -m)] * sins[-m];
            assert(!isnan(out[SHIndex(l,m)]));
            assert(!isinf(out[SHIndex(l,m)]));
        }
        out[SHIndex(l, 0)] *= (float)Klm[KlmIndex(l,0)];
        for (int m = 1; m <= l; ++m)
        {
            out[SHIndex(l, m)] *= sqrt2 * (float)Klm[KlmIndex(l,m)] * coss[m];
            assert(!isnan(out[SHIndex(l,m)]));
            assert(!isinf(out[SHIndex(l,m)]));
        }
    }
}

void SHReduceRinging(Color *c, int lmax, float lambda) {
    for (int l = 0; l <= lmax; ++l) {
        float scale = 1.f / (1.f + lambda * l * l * (l + 1) * (l + 1));
        for (int m = -l; m <= l; ++m)
            c[SHIndex(l, m)] *= scale;
    }
}

} //namespace ToyMan